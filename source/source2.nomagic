# HTML
{}
<center><h1>Part 2: Softmax Regression <span style="color: red">[Draft]</span></h1></center>

<p>
"What I cannot create, I do not understand."
-- Richard Feynman
</p>

<h1>Introduction</h1>
<p>
Let's say we want to build a model to discriminate the following <b>red</b>, <b>green</b>
and <b>blue</b> points in 2-dimensional space:
</p>

# CODE
{'type': 'image', 'width': 600}
import numpy as np
import matplotlib.pyplot as plt
np.set_printoptions(precision=3, suppress=True)

X = np.array([[-0.1, -0.5, 1.3, -0.6, -1.5, 0.2, -0.3,  0.7,  1.1, -1.0,
               -0.5, -1.3,  -1.4, -0.9, 0.4 , -0.4, 0.3, -1.6, -0.5, -1.0],
              [1.4,  -0.1, 0.9,  0.4,  0.4, 0.2, -0.4, -0.8, -1.5,  0.9,
               1.5, -0.45, -1.2, -0.7, -1.3, 0.6, -0.5, -0.7, -1.4, -1.4]])
Y = np.array([[0, 0, 1, 0, 2, 1, 1, 1, 1, 0, 0, 2, 2, 2, 1, 0, 1, 2, 2, 2]])
Y_one_hot = np.eye(3)[Y[0]].T
colormap = np.array(['r', 'g', 'b'])

def plot_scatter(X, Y, colormap, path):
   plt.grid()
   plt.xlim([-2.0, 2.0])
   plt.ylim([-2.0, 2.0])
   plt.xlabel('$x_1$', size=20)
   plt.ylabel('$x_2$', size=20)
   plt.title('Input 2D points', size=18)
   plt.scatter(X[0], X[1], s=50, c=colormap[Y[0]])
   plt.savefig(path)

plot_scatter(X, Y, colormap, 'image.png')

plt.close()
plt.clf()
plt.cla()

# HTML
{}
<p>
In other words, given a point, $(x_1, x_2)$, we want to output either <b>red</b>,
<b>green</b> or <b>blue</b>.
</p>

<p>
We can use <b>Softmax Regression</b> for this problem. We first learn <b>weights</b>
($w_{1,1}, w_{1,2}, w_{2,1}, w_{2,2}, w_{3,1}, w_{3,2}$) and <b>bias</b> ($b_1, b_2, b_3$).
This phase is called <b>training</b>. Then we use the following formula to predict if the
new point is red, blue or green. This phase is called <b>prediction</b> or <b>inference</b>.
</p>

<h1>One hot vector representation</h1>

<p>
We represent the output as a one hot vector. In other words, we represent <b>red points</b>
using $\begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}$ and similarly for <b>green points</b> using
$\begin{bmatrix} 0 \\ 1 \\ 0 \end{bmatrix}$ and lastly for <b>blue points</b> using
$\begin{bmatrix} 0 \\ 0 \\ 1 \end{bmatrix}$.
</p>

<h1>Computation Graph</h1>

<p>
Here is a visual representation of our model:
</p>

<img class="static_image" style="width: 800px;" src="../static_images/image003.png"/>

<p>
and simply pick the biggest $a_i$ to do the <b>final prediction</b>.
</p>

<h1>Feed-forward Phase</h1>

<p>
Let's assume that we are given the weights and bias. How do we calculate the output?
</p>

<p>
We represent $X$ as a matrix. $X$ contains all the points. In our case $X$ contains $M=20$
samples and for each sample we have $(x,y)$. $Y$ contains all the labels (red, green and blue)
as a one hot vector. $W$ has the weights. $b$ has the bias:
</p>

$$
X =
\begin{bmatrix}
0   &  0   & \dots &  0 \\
0   &  0   & \dots &  0 \\
\end{bmatrix}_{2 \times M}, \quad
Y =
\begin{bmatrix}
0   &  0   & \dots &  0 \\
0   &  0   & \dots &  0 \\
0   &  0   & \dots &  0 \\
\end{bmatrix}_{3 \times M}, \quad
W =
\begin{bmatrix}
0   &  0   \\
0   &  0   \\
0   &  0   \\
\end{bmatrix}_{3 \times 2}
b =
\begin{bmatrix}
0  \\
0  \\
0  \\
\end{bmatrix}_{3 \times 1}
$$

<p>
Feed-forward basically means given $X, Y, W$ and $b$, will produce us $a$ and $L$.
</p>

$$
Z = W X + b
$$

<p>
Here we can see it visually:
</p>

$$
\begin{bmatrix}
0   &  0   & \dots &  0 \\
0   &  0   & \dots &  0 \\
0   &  0   & \dots &  0 \\
\end{bmatrix}_{3 \times M}
=
\begin{bmatrix}
0   &  0   \\
0   &  0   \\
0   &  0   \\
\end{bmatrix}_{3 \times 2}
\begin{bmatrix}
0   &  0   & \dots &  0 \\
0   &  0   & \dots &  0 \\
\end{bmatrix}_{2 \times M}
+
\begin{bmatrix}
0  \\
0  \\
0  \\
\end{bmatrix}_{3 \times 1}
$$

<p>
As you may realized, the summation here is called <b>broadcasting</b>.
</p>

<p>
After getting $Z$, we apply softmax function over $Z$:
</p>

<p class="equation">
\begin{equation} \label{eq:softmax}
a_i = \frac{e^{z_i}}{\sum_{j=1}^N e^{z_j}}
\end{equation}
</p>

<p>
However, this may be problematic to compute for big values of $z_i$. We call this phenomena
<b>numerically unstable</b>. Because $e^{z_i}$ easily overflows 64bit (even 128bit).
We need to approach it slightly differently.
</p>

<h1>Numerical Stability of Softmax function</h1>

<p>
The Softmax function takes an N-dimensional vector of real values and
returns a new N-dimensional vector that sums up to $1$. The exact formula is (Softmax equation):
</p>

<p>
Let's make an example:
</p>

# CODE
{}
def softmax(a):
  return np.exp(a) / np.sum(np.exp(a))

a = np.array([1.0, 2.0, 3.0])
print a
print softmax(a)

# HTML
{}
<p>
Intuitively, softmax increases/emphasizes the <b>relative difference</b> between large and small values.
</p>

<p>
However, let's look at this:
</p>

# CODE
{}
def softmax(a):
  return np.exp(a) / np.sum(np.exp(a))

a = np.array([1000.0, 2000.0, 3000.0])
print a
print softmax(a)

# HTML
{}
<p>
We are getting <b>nan</b> values along with a <b>RuntimeWarning: overflow encountered in exp</b>.
Simply because:
</p>

# CODE
{}
print(np.exp(1000))

# HTML
{}
Instead, we can approach it differently:

$$
a_i = \frac{e^{z_i}}{\sum_{j=1}^N e^{z_j}} = \frac{e^{z_i}e^K}{\sum_{j=1}^N e^{z_j} e^K}
= \frac{e^{z_i + K}}{\sum_{j=1}^N e^{z_j + K}}
$$

<p>
for some fixed $K$. And we can pick $K = - max(z_1, z_2, \dots, z_N)$.
</p>

<p>
More practically:
</p>

# CODE
{}
def softmax(a):
  return np.exp(a-max(a)) / np.sum(np.exp(a-max(a)))

a = np.array([1000.0, 2000.0, 3000.0])
print a
print softmax(a)

# HTML
{}
<p>
As you can see, we still have some numerical issues. First and second value of the softmax
shouldn't be $0$, they should be very close $0$, but not exactly $0$. Hmmm, but this is
not as bad as <b>nan</b> issue.
</p>

<p>
So, to wrap-up the Feed-Forward phase, we can finalize the forward propagation step:
</p>

# CODE
{'width': 600}
def stable_softmax(Z):
  return np.exp(Z - Z.max(axis = 0)) / np.sum(np.exp(Z - Z.max(axis = 0)), axis = 0)

def forward_propagate(X, W, b):
  Z = np.matmul(W, X) + b
  A = stable_softmax(Z)

  return Z, A

W = np.array([[ 0.31, 3.95],
      [ 7.07, -0.23],
      [-6.27, -2.35]])

b = np.array([[ 1.2  ],
      [ 2.93 ],
      [-4.14 ]])

Z, A = forward_propagate(X, W, b)
print(Y_one_hot[:,0:10])
print(A[:,0:10])

# HTML
{}
<p>
Above we print the first 10 predictions, and they look pretty good. In fact, we have 100% accuracy.
So, given the weights, and bias, it is pretty straight-forward to calculate the final predictions.
The tricky part is to <i>learn</i> those weights properly.
</p>

# HTML
{}
<h1> Defining Loss function using Maximum Likelihood Estimation </h1>

<p>
In training, our goal is to <b>learn</b> a matrix $W$ of size $(3 \times 2)$  and a $\mathbf{b}$ of size $(3 \times 1)$
that best <b>discriminates</b> red, green and blue points.
</p>

<p>
We want to find $W$ and $\mathbf{b}$ that minimizes some definition of a <b>cost function</b>.
Let's attempt to write a cost function for this problem.
</p>

<p>
Let's say we have three points:
</p>

$$\mathbf{x} = \begin{bmatrix} -0.1 \\ 1.4 \end{bmatrix}, y=0$$

$$\mathbf{x} = \begin{bmatrix} 1.3  \\ 0.9 \end{bmatrix}, y=1$$

<p>
and similarly,
</p>

$$\mathbf{x} = \begin{bmatrix} -1.4  \\ -1.1 \end{bmatrix}, y=2$$

<p>
Now, let's list these $y$ as a <b>one hot vector</b> and, their corresponding <i>imaginary</i> $\mathbf{a}$ values:
</p>

$$\mathbf{y} = \begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}, \mathbf{a} = \begin{bmatrix} 0.9 \\ 0.1 \\ 0.0 \end{bmatrix} $$

$$\mathbf{y} = \begin{bmatrix} 0 \\ 1 \\ 0 \end{bmatrix}, \mathbf{a} = \begin{bmatrix} 0.1 \\ 0.8 \\ 0.1 \end{bmatrix} $$

$$\mathbf{y} = \begin{bmatrix} 0 \\ 0 \\ 1 \end{bmatrix}, \mathbf{a} = \begin{bmatrix} 0.1 \\ 0.2 \\ 0.7 \end{bmatrix} $$

<p>
Intuitively, we want a classifier that produces <b>similar</b> looking $\mathbf{a}$ and $\mathbf{y}$.
This means, if
$\mathbf{y} = \begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}$, then, for example, having
$\mathbf{a} = \begin{bmatrix} 0.8 \\ 0.1 \\ 0.1 \end{bmatrix}$ is <b>more desirable</b> than having
$\mathbf{a} = \begin{bmatrix} 0.6 \\ 0.2 \\ 0.2 \end{bmatrix}$.

<p>
In other words, we want to <b>maximize</b>:
</p>

$$P(\mathbf{y}|\mathbf{x}) = \prod_{j=1}^{3} a_j^{y_j} $$

<p>
Here, $a_j$ represents the jth item in the vector $\mathbf{a}$, and similarly $y_j$ represents the jth value in $\mathbf{y}$.
For example, when $\mathbf{a} = \begin{bmatrix} 0.9 \\ 0.1 \\ 0.0 \end{bmatrix}$, then, $a_1 = 0.9, a_2 = 0.1$ and
$a_3 = 0.0$.
</p>

$$\mathbf{y} = \begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}, \mathbf{a} = \begin{bmatrix} 0.9 \\ 0.1 \\ 0.0 \end{bmatrix},
P(\mathbf{y}|\mathbf{x}) = 0.9 \times 1 \times 1 = 0.9 $$

$$\mathbf{y} = \begin{bmatrix} 0 \\ 1 \\ 0 \end{bmatrix}, \mathbf{a} = \begin{bmatrix} 0.1 \\ 0.8 \\ 0.1 \end{bmatrix},
P(\mathbf{y}|\mathbf{x}) = 1 \times 0.8 \times 1 = 0.8 $$

$$\mathbf{y} = \begin{bmatrix} 0 \\ 0 \\ 1 \end{bmatrix}, \mathbf{a} = \begin{bmatrix} 0.1 \\ 0.2 \\ 0.7 \end{bmatrix},
P(\mathbf{y}|\mathbf{x}) = 1 \times 1 \times 0.7 = 0.7 $$

<p>
<b>Bigger</b> the $P(\mathbf{y}|\mathbf{x})$ is the <b>better</b>.
</p>

<p>
Similar to <b>Logistic Regression</b>, in order to define the <b>loss</b> for multiple samples, we will simply multiply
each value for each sample (<b>Maximum Likelihood Estimation</b>):
</p>

$$J = \prod_{i=1}^{M} P(y^{(i)}|x^{(i)}) $$

<p>
here, $y^{(i)}$, $x^{(i)}$ and $a^{(i)}$ corresponds to ith sample in the training set out of $M$ training samples. We can rewrite it as:
</p>

$$J = \prod_{i=1}^{M} \prod_{j=1}^{3}  (a_j^{(i)}) ^ {y_j^{(i)}} $$

<p>
Maximizing above is equal to maximizing:
</p>

$$J = log \left( \prod_{i=1}^{M} \prod_{j=1}^{3} (a_j^{(i)}) ^ {y_j^{(i)}} \right ) $$

<p>
we can write it as:
</p>

$$J = \sum_{i=1}^{M} \sum_{j=1}^{3} y_j^{(i)} log(a_j^{(i)}) $$

<p>
since we like to <b>minimize</b> things instead of <b>maximizing</b>:
</p>

$$J = - \sum_{i=1}^{M} \sum_{j=1}^{3} y_j^{(i)} log(a_j^{(i)}) $$

<p>
If we add our <b>Log Loss</b> to our computation graph:
</p>

<img class="static_image" style="width: 900px;" src="../static_images/image004.png"/>

<p>
Also, this loss function is sometimes called <b>Cross Entropy Loss Function</b> in some contexts.
</p>

<h1>Gradient Descent</h1>

<p>
Ideally, we want to start with <b>random</b> parameters and make our parameters
better and better gradually as an iterative manner. Gradient descent is simply:
</p>

$$
W = W - \alpha \frac{dL}{dW} \quad \mathbf{b} = \mathbf{b} - \alpha \frac{dL}{d \mathbf{b}}
$$

<p>
The tricky part here is to compute $\frac{dL}{dW}$ and $\frac{dL}{d \mathbf{b}}$. We need
to do a small scale <b>back propagation</b> of derivatives here.
</p>

<p>
But first, let's see what happens if we change $w_{2, 1}$ in the network, step by step:
</p>

<img class="static_image" style="width: 900px;" src="../static_images/animation001.gif"/>

<p>
In order to do gradient descent, we need the derivatives:
</p>

$$
\frac{dL}{dw_{m,n}} = \sum_{i=1}^3 \left (\frac{dL}{da_i} \right) \left (\frac{da_i}{dz_m} \right) \left(\frac{dz_m}{dw_{m,n}} \right ), \quad

\frac{dL}{db_m} = \sum_{i=1}^3 \left (\frac{dL}{da_i} \right) \left (\frac{da_i}{dz_m} \right) \left(\frac{dz_m}{b_m} \right )
$$

<p>
Let's do some calculus:
<img src="../static_images/evil1.png" style="width:30px; height:30px;">
<img src="../static_images/evil2.png" style="width:30px; height:30px;">
</p>

$$
\frac{dL}{da_i} =  \frac{d}{da_i} \left ( - \sum_{j=1}^3 y_j log(a_j) \right ) =
\frac{d}{da_i} \left ( - y_i log(a_i) \right ) = \frac{-y_i}{a_i}
$$

$$
\frac{dz_m}{dw_{m,n}} = x_n, \quad
\frac{dz_m}{b_m} = 1
$$

<h1>Derivative of Softmax Function</h1>

<p>
A nice property about the Softmax function that it produces a legit <b>Probability Distrubition</b>.
In classification (or more generally in Machine Learning) we often want to assign prababilities to
categories or classes. Softmax function is known to work well numereous applications/areas.
</p>

<p>
Softmax is a vector function -- it takes a vector as an input and returns another vector. Therefore, we
cannot just ask for <b>the derivative of softmax</b>, we can only ask the derivative of softmax regarding
particular elements.
</p>

<p>
For example,
</p>

$$
\frac{d}{d z_2} a_1
$$

<p>
refers to how much $a_1$ will change if play with $z_2$.
</p>

<p>
Using the same logic for each element for $a_i$ and $z_j$ would produce us $N \times N$ matrix of derivatives.
</p>

<p>
Let's try to take derivative for <b>one particular element</b>:
</p>

$$
\frac{d}{d z_m} a_i = \frac{d}{d z_m} \frac{e^{z_i}}{\sum_{j=1}^N e^{z_j}}
$$

<p>
We can use <b>Quotient Rule</b> here. Recall that:
</p>

$$
\frac{d}{dx} \frac{f(x)}{g(x)} = \frac{f'(x)g(x) - g'(x)f(x)}{ [g(x)]^2 }
$$

<p>
In our case:
</p>

$$
f(x) = e^{z_i}, \quad g(x) = \sum_{j=1}^N e^{z_j}
$$

<p>
Let's apply <b>Quotient Rule</b>, if $i=m$:
</p>

$$
\frac{d}{d z_m} a_i = \frac{d}{d z_m} \frac{e^{z_i}}{\sum_{j=1}^N e^{z_j}} =
\frac{ (e^{z_i})' \sum_{j=1}^N e^{z_j}  - (\sum_{j=1}^N e^{z_j})' e^{z_i} }{ [\sum_{j=1}^N e^{z_j}] ^ 2 } =
\frac{ e^{z_i} \sum_{j=1}^N e^{z_j} - e^{z_m} e^{z_i} }{ [\sum_{j=1}^N e^{z_j}] ^ 2 } =
\frac{ e^{z_i} } { \sum_{j=1}^N e^{z_j} }  \frac{ \sum_{j=1}^N e^{z_j} - e^{z_m} } { \sum_{j=1}^N e^{z_j} } = (a_i)(1-a_m)
$$

<p>
Notice that we simplify, by plugging $a_i$ and $a_m$ (see Equation \ref{eq:softmax}) in the last step above.
</p>

<p>
Similarly, if $i \neq m$:
</p>

$$
\frac{d}{d z_m} a_i = \frac{d}{d z_m} \frac{e^{z_i}}{\sum_{j=1}^N e^{z_j}}
= \frac{ (e^{z_i})' \sum_{j=1}^N e^{z_j}  - (\sum_{j=1}^N e^{z_j})' e^{z_i} }{ [\sum_{j=1}^N e^{z_j}] ^ 2 }
= \frac{ 0 - e^{z_m} e^{z_i} }{ [\sum_{j=1}^N e^{z_j}] ^ 2 }
= -\frac{ e^{z_m} } { \sum_{j=1}^N e^{z_j} } \frac{ e^{z_i} }{ \sum_{j=1}^N e^{z_j} }
= - (a_m) (a_i)
$$

<p>
More succintly, we can summarize all above:
</p>

$$
\frac{d}{d z_m} a_i =
\begin{cases}
(a_i)(1-a_m),  & \text{if}\ \quad  i = m \\
- (a_m) (a_i), & \text{if}\ \quad  i \neq m
\end{cases}
$$

<p>
or equally:
</p>

$$
\frac{d}{d z_m} a_i = (a_i)(\delta_{i,m} - a_m)
$$

<p>
where $\delta_{i,m} = 1$ if $i=m$, and $0$ otherwise.
</p>

<p>
The reason we want to write it this way is that we don't want to use any <b>loops</b>. And we can
execute the above using matrix operations like:
</p>

$$
\frac{d}{dz} a = \mathbf{a} \mathbf{e^T} \circ (\mathbf{I} - \mathbf{e} \mathbf{a^T})
$$

<p>
where $\mathbf{e}$ is a vector of $1$'s of size $K\times1$ for a suitable $K$ and $\circ$ represents Hadamard product,
in other words element-wise product of matrices. And it is of size $(3 \times 3)$. We plug this below:
</p>

$$
\begin{bmatrix} \frac{da_1}{dz_1} \frac{da_2}{dz_1} \frac{da_3}{dz_1} \\
	\frac{da_1}{dz_2} \frac{da_2}{dz_2} \frac{da_3}{dz_2} \\
	\frac{da_1}{dz_3} \frac{da_2}{dz_3} \frac{da_3}{dz_3}
\end{bmatrix}_{3 \times 3}
\begin{bmatrix} \frac{dL}{da_1} \\
	\frac{dL}{da_2} \\
	\frac{dL}{da_3}
\end{bmatrix}_{3 \times 1}
=
\begin{bmatrix} \frac{dL}{dz_1} \\
	\frac{dL}{dz_2} \\
	\frac{dL}{dz_3}
\end{bmatrix}_{3 \times 1}
$$

<p>
This is exactly what we are going to do. However, this is defined for only one sample. We don't want
to loop over each sample and compute this sequantially. Ideally, we want to do everything using
matrix operations including this step. However, it is a bit trickier. So, first let's see if this
approach works using loops. After, we will see how to convert this to fully matrix operations.
</p>

<h1> Back propagation Phase </h1>

<p>
We will <i>learn</i> the weights using <b>Back Propagation</b>.
</p>

# CODE
{'width': 600}

ALPHA = 2.0 # learning rate

# this simple implementation is numerically unstable, because:
# np.log() returns -inf for small inputs very close to 0
def get_loss(A, Y_one_hot):
  loss = -1 * np.sum(Y_one_hot * np.log(A))
  return loss

# semantically same with above function, and numerically stable.
def get_loss_numerically_stable(Z, Y_one_hot):
  loss = -1 * np.sum(Y_one_hot * ( (Z - Z.max(axis = 0)) -
			    np.log(np.sum(np.exp(Z - Z.max(axis = 0)), axis = 0))
			 ))
  return loss

def get_gradients(Y_one_hot, Z, A):
  dA = (-Y_one_hot / A)
  dZ = np.zeros((3, 20))
  for i in range(20):
    a = A[:, [i]]
    da = dA[:, [i]]
    matrix = np.matmul(a, np.ones((1, 3))) * (np.identity(3) - np.matmul(np.ones((3, 1)), a.T))
    dZ[:, [i]] = np.matmul(matrix, da)

  dW = np.zeros((3,2))
  db = np.zeros((3,1))
  for i in range(20):
    x = X[:, [i]].T
    dz = dZ[:, [i]]
    dw = dz * np.concatenate((x,x,x), axis=0)
    dW += dw
    db += dz

  dW = dW * (1.0/20)
  db = db * (1.0/20)

  return dW, db

def gradient_descent(W, b, dW, db, alpha):
  W = W - alpha * dW
  b = b - alpha * db
  return W, b

# random initialization
W = np.random.rand(3, 2)
b = np.zeros((3, 1))

W_cache = []
b_cache = []
L_cache = []
for i in range(40):
  Z, A = forward_propagate(X, W, b)
  L = (1.0 / 20) * get_loss_numerically_stable(Z, Y_one_hot)

  W_cache.append(W)
  b_cache.append(b)
  L_cache.append(L)

  dW, db = get_gradients(Y_one_hot, Z, A)
  W, b = gradient_descent(W, b, dW, db, ALPHA)

plt.grid()
plt.title('Loss', size=18)
plt.xlabel('Number of iterations', size=15)
plt.ylabel('Loss', size=15)
plt.plot(L_cache)

plt.savefig('image.png')

plt.close()
plt.clf()
plt.cla()

# HTML
{}
<h1> Decision Boundary </h1>

<p>
So, essentially, we have 3 equations:
</p>

$$
\text{Equation A.} \quad w_{1,1} x_1 + w_{1,2} x_2 + b_1 = z_1 \\
\text{Equation B.} \quad w_{2,1} x_1 + w_{2,2} x_2 + b_2 = z_2 \\
\text{Equation C.} \quad w_{3,1} x_1 + w_{3,2} x_2 + b_3 = z_3
$$

<p>
We have 3 boundaries between all 3 choose 2 of above:

<ul>
<li> Equation A - Equation B </li>
<li> Equation A - Equation C </li>
<li> Equation B - Equation C </li>
</ul>

If we focus on Equation A - Equation B:
</p>

$$
w_{1,1} x_1 + w_{1,2} x_2 + b_1 = w_{2,1} x_1 + w_{2,2} x_2 + b_2 \\
w_{1,1} x_1 - w_{2,1} x_1 + w_{1,2} x_2 - w_{2,2} x_2 = b_2 - b_1 \\
(w_{1,1} - w_{2,1}) x_1 + (w_{1,2} - w_{2,2}) x_2 = b_2 - b_1 \\
$$

<p>
If we plot these three lines:
</p>

# CODE
{'type': 'image', 'width': 600}

def plot_decision_boundary(X, Y, W, b, path):
  plt.grid()
  plt.xlim([-2.0, 2.0])
  plt.ylim([-2.0, 2.0])
  plt.xlabel('$x_1$', size=20)
  plt.ylabel('$x_2$', size=20)
  plt.title('Decision boundary', size = 18)

  plt.scatter(X[0], X[1], s=50, c=colormap[Y[0]])

  xs = np.array([-2.0, 2.0])
  ys1 = ((b[1, 0] - b[0, 0]) - (W[0, 0] - W[1, 0]) * xs) / (W[0, 1] - W[1, 1])
  ys2 = ((b[2, 0] - b[0, 0]) - (W[0, 0] - W[2, 0]) * xs) / (W[0, 1] - W[2, 1])
  ys3 = ((b[2, 0] - b[1, 0]) - (W[1, 0] - W[2, 0]) * xs) / (W[1, 1] - W[2, 1])

  plt.plot(xs, ys1, c='black')
  plt.plot(xs, ys2, c='black')
  plt.plot(xs, ys3, c='black')

  plt.savefig(path)

plot_decision_boundary(X, Y, W, b, 'image.png')

plt.close()
plt.clf()
plt.cla()


# HTML
{}
<p>
Above, we simply find the boundaries and plot them. The definition of the boundary is that
the region in which the predictions are equally confident for both of the classifiers. Since
we have three classes, there are 3 choose 2 = 3 boundaries.
</p

<p>
Similarly, we can plot the same as our classifier progresses through the learning process.
As you may guess, it should start from a random point and get smarter in each step.
</p>

# CODE
{'width': 600}
import matplotlib.animation as animation

fig = plt.figure()

ax = fig.add_subplot(111)
ax.set_xlim([-2.0, 2.0])
ax.set_ylim([-2.0, 2.0])
ax.set_xlabel('$x_1$', size=20)
ax.set_ylabel('$x_2$', size=20)

ax.set_title('Decision boundary - Animated', size = 18)

def animate(i):
  xs = np.array([-2.0, 2.0])
  W = W_cache[i]
  b = b_cache[i]

  ys1 = ((b[1, 0] - b[0, 0]) - (W[0, 0] - W[1, 0]) * xs) / (W[0, 1] - W[1, 1])
  ys2 = ((b[2, 0] - b[0, 0]) - (W[0, 0] - W[2, 0]) * xs) / (W[0, 1] - W[2, 1])
  ys3 = ((b[2, 0] - b[1, 0]) - (W[1, 0] - W[2, 0]) * xs) / (W[1, 1] - W[2, 1])

  lines1.set_data(xs, ys1)
  lines2.set_data(xs, ys2)
  lines3.set_data(xs, ys3)

  text_box.set_text('Iteration: {}'.format(i))
  return lines1, lines2, lines3, text_box

lines1, = ax.plot([], [], c='black')
lines2, = ax.plot([], [], c='black')
lines3, = ax.plot([], [], c='black')

ax.scatter(X[0], X[1], s=50, c=colormap[Y[0]])
text_box = ax.text(1.1, 1.6, 'Iteration 0', size = 16)

anim = animation.FuncAnimation(fig, animate, len(W_cache), blit=True, interval=500)
anim.save('animation.mp4', writer='avconv', fps=6, codec="libx264")

plt.close()
plt.clf()
plt.cla()

# HTML
{}
<p>
As you can see, it starts from a random classifier that does not seem to be working well in the
beginning. And the learning process figures out where to go next to find a better classifier.
After the learning is done, the final classifier is pretty good, in fact it has 100% accuracy.
</p>

<p>
Let's see the decision boundary in a more lazy setting. Here, we simply classify every single point
in the grid and then give the predictions to a contour plot. Comparing to the previous animation,
contour plot shows the prediction of every single point in the grid in the final version of the
classifiers parameters. On the other hand, the previous animation shows the parameters step by
step through the gradient descent iterations.
</p>

# CODE
{'width': 600}
NX = 100
NY = 100

def plot_decision_boundary_lazy(X, Y, W, b, counter_param):
  plt.grid()
  plt.xlim([-2.0, 2.0])
  plt.ylim([-2.0, 2.0])
  plt.xlabel('$x_1$', size=20)
  plt.ylabel('$x_2$', size=20)
  plt.title('Decision boundary - Contour plot', size = 18)

  xs = np.linspace(-2.0, 2.0, NX)
  ys = np.linspace(2.0, -2.0, NY)
  xv, yv = np.meshgrid(xs, ys)
  X_fake = np.stack((xv.flatten(), yv.flatten()), axis=0)
  _, predictions = forward_propagate(X_fake, W, b)

  plt.imshow(predictions.T.reshape(NX, NY, 3), extent=[-2.0, 2.0, -2.0, 2.0])
  plt.scatter(X[0], X[1], s=50, c=colormap[Y[0]])

  plt.savefig('image.png')

plot_decision_boundary_lazy(X, Y, W_cache[-1], b_cache[-1], 50)

plt.close()
plt.clf()
plt.cla()

# HTML
{}
<p>
Here, the color of the background depicts our prediction for that imaginary point. Remember that our prediction
is $\mathbf{a}$ and it is three dimensional. So, we simply convert that vector to RGB space. So, for example
if the prediction is: $[0.98, 0.01, 0.01]$, it will be almost a perfect <b>red</b>, and so on.
</p>

<p>
If you look closely, you will see some <b>purple color</b> between red and blue points. That is because
the predictions in that region is something similar to $[0.45, 0.1, 0.45]$. And this means a mix of red
and blue which gives us purple. Similar phenomena happens between other decision boundary intersections.
</p>

<h1> Gradient Descent Parameter Updates </h1>

<p> Here we see the updates of parameters step by step in the gradient descent. </p>

# CODE
{'width': 1000}
import matplotlib.animation as animation

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8), sharex=False, sharey=False)
fig.suptitle('Parameter Updates vs Loss - Animated', size=24)

ax1.grid()
ax1.set_xlim([-0.5, 8.6])
ax1.set_ylim([-5.0, 5.0])
ax1.set_xlabel('Parameter', size=20)
ax1.set_ylabel('Value', size=20)
ax1.set_title('Parameter Values', size = 18)

xlabels = ['$w_{1,1}$', '$w_{1,2}$', '$w_{2,1}$', '$w_{2,2}$',
   '$w_{3,1}$', '$w_{3,2}$', '$b_1$', '$b_2$', '$b_3$']
ax1.set_xticks(range(9))
ax1.set_xticklabels(xlabels, size=20)

ax2.grid()
ax2.set_xlim([0.0, 40])
ax2.set_ylim([0, max(L_cache) * 1.1])
ax2.set_xlabel('Number of iterations', size=20)
ax2.set_ylabel('Loss', size=20)
ax2.set_title('Loss', size=18)

def animate(i):
  ys = np.concatenate((W_cache[i].flatten(), b_cache[i].flatten()))
  xs = np.arange(len(ys))

  for j in range(len(ys)):
    bars[j].set_height(ys[j])

  lines.set_data(range(i+1), L_cache[0:i+1])

  text_box.set_text('Iteration: {}'.format(i))
  return bars, text_box

bars = ax1.bar(range(9), np.zeros(9), color='blue', align='center')
text_box = ax1.text(6.2, 3.6, 'Iteration 0', size = 16)
lines, = ax2.plot([], [], c='black')

anim = animation.FuncAnimation(fig, animate, len(W_cache), blit=True, interval=500)
anim.save('animation.mp4', writer='avconv', fps=4, codec="libx264")

plt.close()
plt.clf()
plt.cla()

# HTML
{}
<p>
This is a nice animation that shows the progress of our parameters $W$ and $\mathbf{b}$
in each iteration of gradient descent along with the corresponding loss value using the
given parameters.
</p>

<p>
We are starting with small random initial values for: $w_{1,1}, w_{1,2}, w_{2,1}, w_{2,2},
w_{3,1}, w_{3,2}$. We start with all $0$ values for $b_1, b_2, b_3$. Then, we start applying
gradient descent. Every step we take in the gradient descent is giving us a better set of parameters
so that we see that the loss is decreasing.
</p>

# HTML
{}
<h1> Calculating Derivatives using Matrix Operations </h1>

<p>
Now, instead of $\mathbf{a}$, we have $A$:
</p>

$$
A =
\left[
\begin{array}{c|c|c|c}
\mathbf{a}^{(1)} & \mathbf{a}^{(2)} & \dots & \mathbf{a}^{(20)} \\
\end{array}
\right]_{3 \times 20}
$$

<p>
where each $\mathbf{a}$ of size $(3 \times 1)$.
</p>

<p>
Similarly, we also have:
</p>

$$
\frac{dL}{dA} =
\left[
\begin{array}{c|c|c|c}
\frac{dL}{d \mathbf{a}^{(1)}} & \frac{dL}{d \mathbf{a}^{(2)}} & \dots & \frac{dL}{d \mathbf{a}^{(20)}} \\
\end{array}
\right]_{3 \times 20}
$$

<p>
again, each $\frac{dL}{d \mathbf{a}}$ of size $(3 \times 1)$.
</p>

<p>
<b>Goal:</b> calculate $\frac{dL}{dZ}$ of size $(3 \times 20)$.
</p>

$$
\left[
\begin{array}{c|c|c|c}
\mathcal{A}_1 & \mathcal{A}_2 & \dots & \mathcal{A}_{20} \\
\end{array}
\right]_{3 \times (3 \times 20)}
\left[
\begin{array}{c|c|c|c}
\frac{dL}{d\mathbf{a}^{(1)}} & 0                 & \dots  & 0                  \\ \hline
0                 & \frac{dL}{d\mathbf{a}^{(2)}} & \dots  & 0                  \\ \hline
\vdots            & \vdots            & \vdots & \vdots             \\ \hline
0                 & 0                 & \dots  & \frac{dL}{d\mathbf{a}^{(20)}} \\
\end{array}
\right]_{(3 \times 20) \times 20}
=
\left[
\begin{array}{c|c|c|c}
\frac{dL}{d\mathbf{z}^{(1)}} & \frac{dL}{d\mathbf{z}^{(2)}} & \dots & \frac{dL}{d\mathbf{z}^{(20)}}
\end{array}
\right]_{3 \times 20}
$$

<p>
where each $\mathcal{A}_i$ of size $(3 \times 3)$ and each $\frac{dL}{d\mathbf{a}^{(i)}}$ of size $(3 \times 1)$.
</p>

<p>
We are almost done, if we can define a proper $\mathcal{A}$. Here it comes: ($\mathcal{A}_{3 \times (3 \times 20)}$)
</p>

$$
\left (
A_{3 \times 20}
\left[
\begin{array}{c|c|c|c|c}
e^T & 0 & 0 & \dots & 0 \\ \hline
0 & e^T & 0 & \dots & 0 \\ \hline
\vdots & \vdots & \vdots & \vdots & \vdots \\ \hline
0 & 0 & 0 & \dots & e^T \\
\end{array}
\right]_{20 \times (3 \times 20)}
\right )
\circ
\left (
\left[
\begin{array}{c}
I_1 \\ \hline
I_2 \\ \hline
\vdots \\ \hline
I_{20}
\end{array}
\right]_{(3 \times 20) \times 3}
-
\left[
\begin{array}{c|c|c|c|c}
e & 0 & 0 & \dots & 0 \\ \hline
0 & e & 0 & \dots & 0 \\ \hline
\vdots & \vdots & \vdots & \vdots & \vdots \\ \hline
0 & 0 & 0 & \dots & e \\
\end{array}
\right]_{(3 \times 20) \times 20}

A^{T}_{20 \times 3}
\right ) ^ T
$$

<p>
where all $e$ of size $(3 \times 1)$ containing all $1$s and all $I_{i}$ is of size ($3 \times 3$) identity
matrix.
</p>

# HTML
{}
<h1> Applying Softmax Regression using low-level Tensorflow APIs </h1>

<p>
Here is how to train the same classifier for the above red, green and blue points using low-level TensorFlow API.
It produces <b>almost exact</b> output with our own hand crafted model. Be aware that there may be small differences
because of the initial random start of both models. (Remember that $W$ is initialized with random values.)
</p>

# CODE
{'width': 600}

import tensorflow as tf

t_X = tf.placeholder(tf.float32, [None, 2])
t_Y = tf.placeholder(tf.float32, [None, 3])

t_W = tf.Variable(tf.random_uniform((2, 3)))
t_b = tf.Variable(tf.zeros((1, 3)))

t_logits = tf.matmul(t_X, t_W) + t_b
t_Softmax = tf.nn.softmax(t_logits)
t_Accuracy = tf.contrib.metrics.accuracy(labels = tf.argmax(t_Y, axis=1),
                                         predictions = tf.argmax(t_Softmax, axis=1))

t_Loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                         labels=t_Y, logits=t_logits))

train = tf.train.GradientDescentOptimizer(2.0).minimize(t_Loss)
init = tf.global_variables_initializer()

losses = []
accs = []
with tf.Session() as session:
   session.run(init)
   for i in range(40):
      ttrain, loss, acc = session.run([train, t_Loss, t_Accuracy], feed_dict={t_X:X.T, t_Y:Y_one_hot.T})
      losses.append(loss)
      accs.append(acc)

plt.grid()
plt.title('Loss', size=18)
plt.xlabel('Number of iterations', size=15)
plt.ylabel('Loss', size=15)
plt.plot(losses)

plt.savefig('image.png')

plt.close()
plt.clf()
plt.cla()

# HTML
{}

<h1>Exercises</h1>
<ol>
  <li>
     If you look at the decision boundary, the three lines of the decision boundary always
     intersects at one single point. Is this <i>always</i> the case? (i.e., is this an invariant
     of some sort?) If this is an invariant, <i>why</i> this is the case?
  </li>
  <li>
     Looking to the structure of our decision boundary, try to come up with a set of samples
     including three classes (red, green and blue) that is linearly separable that our classifier
     would not be able to successully discriminate all of them.
  </li>
  <li>
     Assume we had four classes: red, green, blue and <b>orange</b> instead of only three classes.
     How would the decision boundary look like? Try to guess its potential structure.
     Is that boundary able to classify <i>any</i> linearly separable possible inputs containing
     four classes?
  </li>
</ol>

<h1>References</h1>

<ul>
  <li> http://ufldl.stanford.edu/tutorial/supervised/SoftmaxRegression/ </li>
  <li> https://eli.thegreenplace.net/2016/the-softmax-function-and-its-derivative/ </li>
  <li> http://tutorial.math.lamar.edu/Classes/CalcI/ProductQuotientRule.aspx </li>
</ul>
